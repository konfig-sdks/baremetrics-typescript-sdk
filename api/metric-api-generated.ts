/* tslint:disable */
/* eslint-disable */
/*
Production

Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect. 

In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster: 

Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit. 

Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.

Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MetricShowCohortsResponseInner } from '../models';
// @ts-ignore
import { MetricShowDetailsResponse } from '../models';
// @ts-ignore
import { MetricShowPlanBreakoutResponse } from '../models';
// @ts-ignore
import { MetricShowSummaryResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MetricApi - axios parameter creator
 * @export
 */
export const MetricApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of customers that make up this metric. For example, the upgrades metric will return all customers who have upgraded within the selected range. You can also see their MRR contribution.
         * @summary Show Customers
         * @param {string | Date} startDate 
         * @param {string | Date} endDate 
         * @param {string} metric You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: async (startDate: string | Date, endDate: string | Date, metric: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('listCustomers', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('listCustomers', 'endDate', endDate)
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('listCustomers', 'metric', metric)
            const localVarPath = `/v1/metrics/{metric}/customers`
                .replace(`{${"metric"}}`, encodeURIComponent(String(metric !== undefined ? metric : `-metric-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/metrics/{metric}/customers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Cohorts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCohorts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/metrics/cohorts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/metrics/cohorts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Metric
         * @param {string} metric You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction)
         * @param {string | Date} startDate 
         * @param {string | Date} endDate 
         * @param {number} [compareTo] The number of days ago to compare results to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails: async (metric: string, startDate: string | Date, endDate: string | Date, compareTo?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('showDetails', 'metric', metric)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('showDetails', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('showDetails', 'endDate', endDate)
            const localVarPath = `/v1/metrics/{metric}`
                .replace(`{${"metric"}}`, encodeURIComponent(String(metric !== undefined ? metric : `-metric-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (compareTo !== undefined) {
                localVarQueryParameter['compare_to'] = compareTo;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/metrics/{metric}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This allows you to break down a metric by plan, across a date range
         * @summary Show Plan Breakout
         * @param {string | Date} startDate 
         * @param {string | Date} endDate 
         * @param {string} metric You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPlanBreakout: async (startDate: string | Date, endDate: string | Date, metric: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('showPlanBreakout', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('showPlanBreakout', 'endDate', endDate)
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('showPlanBreakout', 'metric', metric)
            const localVarPath = `/v1/metrics/{metric}/plans`
                .replace(`{${"metric"}}`, encodeURIComponent(String(metric !== undefined ? metric : `-metric-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/metrics/{metric}/plans',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Summary
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSummary: async (startDate: string, endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('showSummary', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('showSummary', 'endDate', endDate)
            const localVarPath = `/v1/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/metrics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricApi - functional programming interface
 * @export
 */
export const MetricApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of customers that make up this metric. For example, the upgrades metric will return all customers who have upgraded within the selected range. You can also see their MRR contribution.
         * @summary Show Customers
         * @param {MetricApiListCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomers(requestParameters: MetricApiListCustomersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomers(requestParameters.startDate, requestParameters.endDate, requestParameters.metric, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Cohorts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showCohorts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetricShowCohortsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showCohorts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Metric
         * @param {MetricApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDetails(requestParameters: MetricApiShowDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricShowDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDetails(requestParameters.metric, requestParameters.startDate, requestParameters.endDate, requestParameters.compareTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This allows you to break down a metric by plan, across a date range
         * @summary Show Plan Breakout
         * @param {MetricApiShowPlanBreakoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showPlanBreakout(requestParameters: MetricApiShowPlanBreakoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricShowPlanBreakoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showPlanBreakout(requestParameters.startDate, requestParameters.endDate, requestParameters.metric, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Summary
         * @param {MetricApiShowSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSummary(requestParameters: MetricApiShowSummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricShowSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSummary(requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetricApi - factory interface
 * @export
 */
export const MetricApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricApiFp(configuration)
    return {
        /**
         * Returns a list of customers that make up this metric. For example, the upgrades metric will return all customers who have upgraded within the selected range. You can also see their MRR contribution.
         * @summary Show Customers
         * @param {MetricApiListCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(requestParameters: MetricApiListCustomersRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listCustomers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Cohorts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCohorts(options?: AxiosRequestConfig): AxiosPromise<Array<MetricShowCohortsResponseInner>> {
            return localVarFp.showCohorts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Metric
         * @param {MetricApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails(requestParameters: MetricApiShowDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<MetricShowDetailsResponse> {
            return localVarFp.showDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This allows you to break down a metric by plan, across a date range
         * @summary Show Plan Breakout
         * @param {MetricApiShowPlanBreakoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPlanBreakout(requestParameters: MetricApiShowPlanBreakoutRequest, options?: AxiosRequestConfig): AxiosPromise<MetricShowPlanBreakoutResponse> {
            return localVarFp.showPlanBreakout(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Summary
         * @param {MetricApiShowSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSummary(requestParameters: MetricApiShowSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<MetricShowSummaryResponse> {
            return localVarFp.showSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listCustomers operation in MetricApi.
 * @export
 * @interface MetricApiListCustomersRequest
 */
export type MetricApiListCustomersRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof MetricApiListCustomers
    */
    readonly startDate: string | Date
    
    /**
    * 
    * @type {string | Date}
    * @memberof MetricApiListCustomers
    */
    readonly endDate: string | Date
    
    /**
    * You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction)
    * @type {string}
    * @memberof MetricApiListCustomers
    */
    readonly metric: string
    
}

/**
 * Request parameters for showDetails operation in MetricApi.
 * @export
 * @interface MetricApiShowDetailsRequest
 */
export type MetricApiShowDetailsRequest = {
    
    /**
    * You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction)
    * @type {string}
    * @memberof MetricApiShowDetails
    */
    readonly metric: string
    
    /**
    * 
    * @type {string | Date}
    * @memberof MetricApiShowDetails
    */
    readonly startDate: string | Date
    
    /**
    * 
    * @type {string | Date}
    * @memberof MetricApiShowDetails
    */
    readonly endDate: string | Date
    
    /**
    * The number of days ago to compare results to
    * @type {number}
    * @memberof MetricApiShowDetails
    */
    readonly compareTo?: number
    
}

/**
 * Request parameters for showPlanBreakout operation in MetricApi.
 * @export
 * @interface MetricApiShowPlanBreakoutRequest
 */
export type MetricApiShowPlanBreakoutRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof MetricApiShowPlanBreakout
    */
    readonly startDate: string | Date
    
    /**
    * 
    * @type {string | Date}
    * @memberof MetricApiShowPlanBreakout
    */
    readonly endDate: string | Date
    
    /**
    * You can see a list of available metrics [here](https://developers.baremetrics.com/reference/introduction)
    * @type {string}
    * @memberof MetricApiShowPlanBreakout
    */
    readonly metric: string
    
}

/**
 * Request parameters for showSummary operation in MetricApi.
 * @export
 * @interface MetricApiShowSummaryRequest
 */
export type MetricApiShowSummaryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof MetricApiShowSummary
    */
    readonly startDate: string
    
    /**
    * 
    * @type {string}
    * @memberof MetricApiShowSummary
    */
    readonly endDate: string
    
}

/**
 * MetricApiGenerated - object-oriented interface
 * @export
 * @class MetricApiGenerated
 * @extends {BaseAPI}
 */
export class MetricApiGenerated extends BaseAPI {
    /**
     * Returns a list of customers that make up this metric. For example, the upgrades metric will return all customers who have upgraded within the selected range. You can also see their MRR contribution.
     * @summary Show Customers
     * @param {MetricApiListCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricApiGenerated
     */
    public listCustomers(requestParameters: MetricApiListCustomersRequest, options?: AxiosRequestConfig) {
        return MetricApiFp(this.configuration).listCustomers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Cohorts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricApiGenerated
     */
    public showCohorts(options?: AxiosRequestConfig) {
        return MetricApiFp(this.configuration).showCohorts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Metric
     * @param {MetricApiShowDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricApiGenerated
     */
    public showDetails(requestParameters: MetricApiShowDetailsRequest, options?: AxiosRequestConfig) {
        return MetricApiFp(this.configuration).showDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This allows you to break down a metric by plan, across a date range
     * @summary Show Plan Breakout
     * @param {MetricApiShowPlanBreakoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricApiGenerated
     */
    public showPlanBreakout(requestParameters: MetricApiShowPlanBreakoutRequest, options?: AxiosRequestConfig) {
        return MetricApiFp(this.configuration).showPlanBreakout(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Summary
     * @param {MetricApiShowSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricApiGenerated
     */
    public showSummary(requestParameters: MetricApiShowSummaryRequest, options?: AxiosRequestConfig) {
        return MetricApiFp(this.configuration).showSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
