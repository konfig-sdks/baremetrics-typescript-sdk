/* tslint:disable */
/* eslint-disable */
/*
Production

Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect. 

In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster: 

Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit. 

Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.

Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttributeCreateFieldRequest } from '../models';
// @ts-ignore
import { AttributeCreateFieldResponse } from '../models';
// @ts-ignore
import { AttributeGetFieldsResponse } from '../models';
// @ts-ignore
import { AttributeSetProperties400Response } from '../models';
// @ts-ignore
import { AttributeSetProperties409Response } from '../models';
// @ts-ignore
import { AttributeSetPropertiesRequest } from '../models';
// @ts-ignore
import { AttributeSetPropertiesRequestAttributesInner } from '../models';
// @ts-ignore
import { AttributeUpdateFieldRequest } from '../models';
// @ts-ignore
import { AttributeUpdateFieldResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AttributeApi - axios parameter creator
 * @export
 */
export const AttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Attribute Field
         * @param {AttributeCreateFieldRequest} [attributeCreateFieldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createField: async (attributeCreateFieldRequest?: AttributeCreateFieldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/attributes/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: attributeCreateFieldRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/attributes/fields',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(attributeCreateFieldRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Attribute Fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/attributes/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/attributes/fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update properties on customers. This will work across all sources.
         * @summary Set Attributes
         * @param {AttributeSetPropertiesRequest} [attributeSetPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProperties: async (attributeSetPropertiesRequest?: AttributeSetPropertiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: attributeSetPropertiesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/attributes',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(attributeSetPropertiesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Attribute Field
         * @param {string} id 
         * @param {AttributeUpdateFieldRequest} [attributeUpdateFieldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateField: async (id: string, attributeUpdateFieldRequest?: AttributeUpdateFieldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateField', 'id', id)
            const localVarPath = `/v1/attributes/fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: attributeUpdateFieldRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/attributes/fields/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(attributeUpdateFieldRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributeApi - functional programming interface
 * @export
 */
export const AttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Attribute Field
         * @param {AttributeApiCreateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createField(requestParameters: AttributeApiCreateFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeCreateFieldResponse>> {
            const attributeCreateFieldRequest: AttributeCreateFieldRequest = {
                title: requestParameters.title,
                field_type: requestParameters.field_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createField(attributeCreateFieldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Attribute Fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGetFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create or update properties on customers. This will work across all sources.
         * @summary Set Attributes
         * @param {AttributeApiSetPropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProperties(requestParameters: AttributeApiSetPropertiesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const attributeSetPropertiesRequest: AttributeSetPropertiesRequest = {
                attributes: requestParameters.attributes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setProperties(attributeSetPropertiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Attribute Field
         * @param {AttributeApiUpdateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateField(requestParameters: AttributeApiUpdateFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeUpdateFieldResponse>> {
            const attributeUpdateFieldRequest: AttributeUpdateFieldRequest = {
                title: requestParameters.title
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateField(requestParameters.id, attributeUpdateFieldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributeApi - factory interface
 * @export
 */
export const AttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Attribute Field
         * @param {AttributeApiCreateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createField(requestParameters: AttributeApiCreateFieldRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeCreateFieldResponse> {
            return localVarFp.createField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Attribute Fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFields(options?: AxiosRequestConfig): AxiosPromise<AttributeGetFieldsResponse> {
            return localVarFp.getFields(options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update properties on customers. This will work across all sources.
         * @summary Set Attributes
         * @param {AttributeApiSetPropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProperties(requestParameters: AttributeApiSetPropertiesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.setProperties(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Attribute Field
         * @param {AttributeApiUpdateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateField(requestParameters: AttributeApiUpdateFieldRequest, options?: AxiosRequestConfig): AxiosPromise<AttributeUpdateFieldResponse> {
            return localVarFp.updateField(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createField operation in AttributeApi.
 * @export
 * @interface AttributeApiCreateFieldRequest
 */
export type AttributeApiCreateFieldRequest = {
    
} & AttributeCreateFieldRequest

/**
 * Request parameters for setProperties operation in AttributeApi.
 * @export
 * @interface AttributeApiSetPropertiesRequest
 */
export type AttributeApiSetPropertiesRequest = {
    
} & AttributeSetPropertiesRequest

/**
 * Request parameters for updateField operation in AttributeApi.
 * @export
 * @interface AttributeApiUpdateFieldRequest
 */
export type AttributeApiUpdateFieldRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AttributeApiUpdateField
    */
    readonly id: string
    
} & AttributeUpdateFieldRequest

/**
 * AttributeApiGenerated - object-oriented interface
 * @export
 * @class AttributeApiGenerated
 * @extends {BaseAPI}
 */
export class AttributeApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Attribute Field
     * @param {AttributeApiCreateFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiGenerated
     */
    public createField(requestParameters: AttributeApiCreateFieldRequest, options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).createField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Attribute Fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiGenerated
     */
    public getFields(options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).getFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create or update properties on customers. This will work across all sources.
     * @summary Set Attributes
     * @param {AttributeApiSetPropertiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiGenerated
     */
    public setProperties(requestParameters: AttributeApiSetPropertiesRequest = {}, options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).setProperties(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Attribute Field
     * @param {AttributeApiUpdateFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiGenerated
     */
    public updateField(requestParameters: AttributeApiUpdateFieldRequest, options?: AxiosRequestConfig) {
        return AttributeApiFp(this.configuration).updateField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
