/* tslint:disable */
/* eslint-disable */
/*
Production

Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect. 

In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster: 

Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit. 

Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.

Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SourceCancelSubscription400Response } from '../models';
// @ts-ignore
import { SourceCancelSubscriptionRequest } from '../models';
// @ts-ignore
import { SourceCancelSubscriptionResponse } from '../models';
// @ts-ignore
import { SourceCreateChargeOneOffRequest } from '../models';
// @ts-ignore
import { SourceCreateCustomerRecord400Response } from '../models';
// @ts-ignore
import { SourceCreateCustomerRecordRequest } from '../models';
// @ts-ignore
import { SourceCreateCustomerRecordResponse } from '../models';
// @ts-ignore
import { SourceCreateOneOffRefundRequest } from '../models';
// @ts-ignore
import { SourceCreatePlan400Response } from '../models';
// @ts-ignore
import { SourceCreatePlanRequest } from '../models';
// @ts-ignore
import { SourceCreatePlanResponse } from '../models';
// @ts-ignore
import { SourceCreateSubscription400Response } from '../models';
// @ts-ignore
import { SourceCreateSubscriptionRequest } from '../models';
// @ts-ignore
import { SourceCreateSubscriptionRequestAddonsInner } from '../models';
// @ts-ignore
import { SourceCreateSubscriptionResponse } from '../models';
// @ts-ignore
import { SourceGetCustomerDetailsResponse } from '../models';
// @ts-ignore
import { SourceGetCustomerListResponse } from '../models';
// @ts-ignore
import { SourceGetPlanResponse } from '../models';
// @ts-ignore
import { SourceGetPlansListResponse } from '../models';
// @ts-ignore
import { SourceGetRefundDetailsResponse } from '../models';
// @ts-ignore
import { SourceGetRefundsResponse } from '../models';
// @ts-ignore
import { SourceListCustomerEventsResponse } from '../models';
// @ts-ignore
import { SourceListSourcesResponse } from '../models';
// @ts-ignore
import { SourceUpdateCustomerInformation400Response } from '../models';
// @ts-ignore
import { SourceUpdateCustomerInformationRequest } from '../models';
// @ts-ignore
import { SourceUpdateCustomerInformationResponse } from '../models';
// @ts-ignore
import { SourceUpdatePlanRequest } from '../models';
// @ts-ignore
import { SourceUpdatePlanResponse } from '../models';
// @ts-ignore
import { SourceUpdateSubscription400Response } from '../models';
// @ts-ignore
import { SourceUpdateSubscriptionRequest } from '../models';
// @ts-ignore
import { SourceUpdateSubscriptionResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SourceApi - axios parameter creator
 * @export
 */
export const SourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to cancel a subscription.
         * @summary Cancel Subscription
         * @param {string} subscriptionOid Your unique ID for the subscription
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceCancelSubscriptionRequest} [sourceCancelSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: async (subscriptionOid: string, sourceId: string, sourceCancelSubscriptionRequest?: SourceCancelSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionOid' is not null or undefined
            assertParamExists('cancelSubscription', 'subscriptionOid', subscriptionOid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('cancelSubscription', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/subscriptions/{subscription_oid}/cancel`
                .replace(`{${"subscription_oid"}}`, encodeURIComponent(String(subscriptionOid !== undefined ? subscriptionOid : `-subscription_oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceCancelSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/subscriptions/{subscription_oid}/cancel',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceCancelSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create \"One-Off\" charges that are not linked to a subscription.
         * @summary Create Charge
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceCreateChargeOneOffRequest} [sourceCreateChargeOneOffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChargeOneOff: async (sourceId: string, sourceCreateChargeOneOffRequest?: SourceCreateChargeOneOffRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('createChargeOneOff', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/charges`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceCreateChargeOneOffRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/charges',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceCreateChargeOneOffRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a customer record. After you create the record, you will be able to create a [Subscription](https://developers.baremetrics.com/reference/introduction)
         * @summary Create Customer
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceCreateCustomerRecordRequest} [sourceCreateCustomerRecordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerRecord: async (sourceId: string, sourceCreateCustomerRecordRequest?: SourceCreateCustomerRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('createCustomerRecord', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/customers`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceCreateCustomerRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/customers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceCreateCustomerRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create \"One-Off\" refunds that are not linked to a subscription.
         * @summary Create Refund
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceCreateOneOffRefundRequest} [sourceCreateOneOffRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneOffRefund: async (sourceId: string, sourceCreateOneOffRefundRequest?: SourceCreateOneOffRefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('createOneOffRefund', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/refunds`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceCreateOneOffRefundRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/refunds',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceCreateOneOffRefundRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a plan for use when [creating](https://developers.baremetrics.com/reference/introduction) or [updating](https://developers.baremetrics.com/reference/introduction) subscriptions.
         * @summary Create Plan
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceCreatePlanRequest} [sourceCreatePlanRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlan: async (sourceId: string, sourceCreatePlanRequest?: SourceCreatePlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('createPlan', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/plans`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceCreatePlanRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/plans',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceCreatePlanRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create a Subscription.
         * @summary Create Subscription
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceCreateSubscriptionRequest} [sourceCreateSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (sourceId: string, sourceCreateSubscriptionRequest?: SourceCreateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('createSubscription', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/subscriptions`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceCreateSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/subscriptions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceCreateSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Customer
         * @param {string} oid 
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: async (oid: string, sourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('deleteCustomer', 'oid', oid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('deleteCustomer', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/customers/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/customers/{oid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Plan
         * @param {string} oid 
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlan: async (oid: string, sourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('deletePlan', 'oid', oid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('deletePlan', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/plans/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/plans/{oid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Charge
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeDetails: async (sourceId: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getChargeDetails', 'sourceId', sourceId)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('getChargeDetails', 'oid', oid)
            const localVarPath = `/v1/{source_id}/charges/{oid}`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)))
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/charges/{oid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Charges
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {string} [subscriptionOid] 
         * @param {string} [customerOid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeList: async (sourceId: string, start?: string, end?: string, subscriptionOid?: string, customerOid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getChargeList', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/charges`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }

            if (subscriptionOid !== undefined) {
                localVarQueryParameter['subscription_oid'] = subscriptionOid;
            }

            if (customerOid !== undefined) {
                localVarQueryParameter['customer_oid'] = customerOid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/charges',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Customer
         * @param {string} oid 
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerDetails: async (oid: string, sourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('getCustomerDetails', 'oid', oid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getCustomerDetails', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/customers/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/customers/{oid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of all customers on your account
         * @summary List Customers
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} [search] Allows you to search for a customer based on: oid, email, notes and name
         * @param {string} [sort] Allows you to sort the results. You can use ltv or created
         * @param {string} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerList: async (sourceId: string, search?: string, sort?: string, order?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getCustomerList', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/customers`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/customers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Event
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: async (sourceId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getEventById', 'sourceId', sourceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventById', 'id', id)
            const localVarPath = `/v1/{source_id}/events/{id}`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/events/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Events
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} [liveStream] Set this to true to only return events that show up in the live stream
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (sourceId: string, liveStream?: string, start?: string, end?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getEvents', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/events`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (liveStream !== undefined) {
                localVarQueryParameter['live_stream'] = liveStream;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Plan
         * @param {string} oid 
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlan: async (oid: string, sourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('getPlan', 'oid', oid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getPlan', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/plans/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/plans/{oid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Plans
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} [search] Allows you to search based on the name or oid fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlansList: async (sourceId: string, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getPlansList', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/plans`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/plans',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Refund
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundDetails: async (sourceId: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getRefundDetails', 'sourceId', sourceId)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('getRefundDetails', 'oid', oid)
            const localVarPath = `/v1/{source_id}/refunds/{oid}`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)))
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/refunds/{oid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Refunds
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefunds: async (sourceId: string, start?: string, end?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getRefunds', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/refunds`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/refunds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Subscription
         * @param {string} oid 
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (oid: string, sourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('getSubscription', 'oid', oid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getSubscription', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/subscriptions/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/subscriptions/{oid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all subscriptions linked to this API Key.
         * @summary List Subscriptions
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} [customerOid] This allows you to return subscriptions for a given customer
         * @param {string} [order] Allows you to order subscriptions from newest to oldest &#x60;desc&#x60; or oldest to newest &#x60;asc&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions: async (sourceId: string, customerOid?: string, order?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getSubscriptions', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/subscriptions`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (customerOid !== undefined) {
                localVarQueryParameter['customer_oid'] = customerOid;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/subscriptions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Customer Events
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerEvents: async (sourceId: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('listCustomerEvents', 'sourceId', sourceId)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('listCustomerEvents', 'oid', oid)
            const localVarPath = `/v1/{source_id}/customers/{oid}/events`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)))
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/customers/{oid}/events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/sources',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete \"One-Off\" charges that are not linked to a subscription.
         * @summary Delete Charge
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOneOffCharge: async (sourceId: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('removeOneOffCharge', 'sourceId', sourceId)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('removeOneOffCharge', 'oid', oid)
            const localVarPath = `/v1/{source_id}/charges/{oid}`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)))
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/charges/{oid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete \"One-Off\" refunds that are not linked to a subscription.
         * @summary Delete Refund
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {string} oid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOneOffRefund: async (sourceId: string, oid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('removeOneOffRefund', 'sourceId', sourceId)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('removeOneOffRefund', 'oid', oid)
            const localVarPath = `/v1/{source_id}/refunds/{oid}`
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)))
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/refunds/{oid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Subscription
         * @param {string} oid 
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscription: async (oid: string, sourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('removeSubscription', 'oid', oid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('removeSubscription', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/subscriptions/{oid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid !== undefined ? oid : `-oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/subscriptions/{oid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update the basic information stored on a Customer, such as first name, last name and notes
         * @summary Update Customer
         * @param {string} customerOid Your unique ID for the customer
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceUpdateCustomerInformationRequest} [sourceUpdateCustomerInformationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerInformation: async (customerOid: string, sourceId: string, sourceUpdateCustomerInformationRequest?: SourceUpdateCustomerInformationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerOid' is not null or undefined
            assertParamExists('updateCustomerInformation', 'customerOid', customerOid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('updateCustomerInformation', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/customers/{customer_oid}`
                .replace(`{${"customer_oid"}}`, encodeURIComponent(String(customerOid !== undefined ? customerOid : `-customer_oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceUpdateCustomerInformationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/customers/{customer_oid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceUpdateCustomerInformationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Plan
         * @param {string} planOid Your interval plan id
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceUpdatePlanRequest} [sourceUpdatePlanRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlan: async (planOid: string, sourceId: string, sourceUpdatePlanRequest?: SourceUpdatePlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planOid' is not null or undefined
            assertParamExists('updatePlan', 'planOid', planOid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('updatePlan', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/plans/{plan_oid}`
                .replace(`{${"plan_oid"}}`, encodeURIComponent(String(planOid !== undefined ? planOid : `-plan_oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceUpdatePlanRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/plans/{plan_oid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceUpdatePlanRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This allows you to update a Subscription, such as changing plans and addons.
         * @summary Update Subscription
         * @param {string} subscriptionOid Your unique ID for the subscription
         * @param {string} sourceId Please see [Sources](ref:sources)
         * @param {SourceUpdateSubscriptionRequest} [sourceUpdateSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: async (subscriptionOid: string, sourceId: string, sourceUpdateSubscriptionRequest?: SourceUpdateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionOid' is not null or undefined
            assertParamExists('updateSubscription', 'subscriptionOid', subscriptionOid)
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('updateSubscription', 'sourceId', sourceId)
            const localVarPath = `/v1/{source_id}/subscriptions/{subscription_oid}`
                .replace(`{${"subscription_oid"}}`, encodeURIComponent(String(subscriptionOid !== undefined ? subscriptionOid : `-subscription_oid-`)))
                .replace(`{${"source_id"}}`, encodeURIComponent(String(sourceId !== undefined ? sourceId : `-source_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sourceUpdateSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/{source_id}/subscriptions/{subscription_oid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sourceUpdateSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourceApi - functional programming interface
 * @export
 */
export const SourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourceApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to cancel a subscription.
         * @summary Cancel Subscription
         * @param {SourceApiCancelSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSubscription(requestParameters: SourceApiCancelSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceCancelSubscriptionResponse>> {
            const sourceCancelSubscriptionRequest: SourceCancelSubscriptionRequest = {
                canceled_at: requestParameters.canceled_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSubscription(requestParameters.subscriptionOid, requestParameters.sourceId, sourceCancelSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create \"One-Off\" charges that are not linked to a subscription.
         * @summary Create Charge
         * @param {SourceApiCreateChargeOneOffRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChargeOneOff(requestParameters: SourceApiCreateChargeOneOffRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const sourceCreateChargeOneOffRequest: SourceCreateChargeOneOffRequest = {
                oid: requestParameters.oid,
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                customer_oid: requestParameters.customer_oid,
                created: requestParameters.created,
                status: requestParameters.status,
                fee: requestParameters.fee,
                subscription_oid: requestParameters.subscription_oid
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChargeOneOff(requestParameters.sourceId, sourceCreateChargeOneOffRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a customer record. After you create the record, you will be able to create a [Subscription](https://developers.baremetrics.com/reference/introduction)
         * @summary Create Customer
         * @param {SourceApiCreateCustomerRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomerRecord(requestParameters: SourceApiCreateCustomerRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceCreateCustomerRecordResponse>> {
            const sourceCreateCustomerRecordRequest: SourceCreateCustomerRecordRequest = {
                name: requestParameters.name,
                notes: requestParameters.notes,
                email: requestParameters.email,
                oid: requestParameters.oid,
                created: requestParameters.created
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomerRecord(requestParameters.sourceId, sourceCreateCustomerRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create \"One-Off\" refunds that are not linked to a subscription.
         * @summary Create Refund
         * @param {SourceApiCreateOneOffRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneOffRefund(requestParameters: SourceApiCreateOneOffRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const sourceCreateOneOffRefundRequest: SourceCreateOneOffRefundRequest = {
                oid: requestParameters.oid,
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                customer_oid: requestParameters.customer_oid,
                charge_oid: requestParameters.charge_oid,
                created: requestParameters.created
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneOffRefund(requestParameters.sourceId, sourceCreateOneOffRefundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a plan for use when [creating](https://developers.baremetrics.com/reference/introduction) or [updating](https://developers.baremetrics.com/reference/introduction) subscriptions.
         * @summary Create Plan
         * @param {SourceApiCreatePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlan(requestParameters: SourceApiCreatePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceCreatePlanResponse>> {
            const sourceCreatePlanRequest: SourceCreatePlanRequest = {
                oid: requestParameters.oid,
                name: requestParameters.name,
                currency: requestParameters.currency,
                amount: requestParameters.amount,
                interval: requestParameters.interval,
                interval_count: requestParameters.interval_count,
                trial_duration: requestParameters.trial_duration,
                trial_duration_unit: requestParameters.trial_duration_unit
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlan(requestParameters.sourceId, sourceCreatePlanRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create a Subscription.
         * @summary Create Subscription
         * @param {SourceApiCreateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(requestParameters: SourceApiCreateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceCreateSubscriptionResponse>> {
            const sourceCreateSubscriptionRequest: SourceCreateSubscriptionRequest = {
                oid: requestParameters.oid,
                started_at: requestParameters.started_at,
                canceled_at: requestParameters.canceled_at,
                plan_oid: requestParameters.plan_oid,
                customer_oid: requestParameters.customer_oid,
                addons: requestParameters.addons,
                quantity: requestParameters.quantity,
                discount: requestParameters.discount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscription(requestParameters.sourceId, sourceCreateSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Customer
         * @param {SourceApiDeleteCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomer(requestParameters: SourceApiDeleteCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomer(requestParameters.oid, requestParameters.sourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Plan
         * @param {SourceApiDeletePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlan(requestParameters: SourceApiDeletePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePlan(requestParameters.oid, requestParameters.sourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Charge
         * @param {SourceApiGetChargeDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeDetails(requestParameters: SourceApiGetChargeDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeDetails(requestParameters.sourceId, requestParameters.oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Charges
         * @param {SourceApiGetChargeListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargeList(requestParameters: SourceApiGetChargeListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargeList(requestParameters.sourceId, requestParameters.start, requestParameters.end, requestParameters.subscriptionOid, requestParameters.customerOid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Customer
         * @param {SourceApiGetCustomerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerDetails(requestParameters: SourceApiGetCustomerDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceGetCustomerDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerDetails(requestParameters.oid, requestParameters.sourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a list of all customers on your account
         * @summary List Customers
         * @param {SourceApiGetCustomerListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerList(requestParameters: SourceApiGetCustomerListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceGetCustomerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerList(requestParameters.sourceId, requestParameters.search, requestParameters.sort, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Event
         * @param {SourceApiGetEventByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventById(requestParameters: SourceApiGetEventByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventById(requestParameters.sourceId, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Events
         * @param {SourceApiGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(requestParameters: SourceApiGetEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(requestParameters.sourceId, requestParameters.liveStream, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Plan
         * @param {SourceApiGetPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlan(requestParameters: SourceApiGetPlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceGetPlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlan(requestParameters.oid, requestParameters.sourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Plans
         * @param {SourceApiGetPlansListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlansList(requestParameters: SourceApiGetPlansListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceGetPlansListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlansList(requestParameters.sourceId, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Refund
         * @param {SourceApiGetRefundDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRefundDetails(requestParameters: SourceApiGetRefundDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceGetRefundDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRefundDetails(requestParameters.sourceId, requestParameters.oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Refunds
         * @param {SourceApiGetRefundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRefunds(requestParameters: SourceApiGetRefundsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceGetRefundsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRefunds(requestParameters.sourceId, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Subscription
         * @param {SourceApiGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(requestParameters: SourceApiGetSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(requestParameters.oid, requestParameters.sourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all subscriptions linked to this API Key.
         * @summary List Subscriptions
         * @param {SourceApiGetSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptions(requestParameters: SourceApiGetSubscriptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptions(requestParameters.sourceId, requestParameters.customerOid, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Customer Events
         * @param {SourceApiListCustomerEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerEvents(requestParameters: SourceApiListCustomerEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceListCustomerEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerEvents(requestParameters.sourceId, requestParameters.oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSources(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceListSourcesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSources(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete \"One-Off\" charges that are not linked to a subscription.
         * @summary Delete Charge
         * @param {SourceApiRemoveOneOffChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeOneOffCharge(requestParameters: SourceApiRemoveOneOffChargeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeOneOffCharge(requestParameters.sourceId, requestParameters.oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete \"One-Off\" refunds that are not linked to a subscription.
         * @summary Delete Refund
         * @param {SourceApiRemoveOneOffRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeOneOffRefund(requestParameters: SourceApiRemoveOneOffRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeOneOffRefund(requestParameters.sourceId, requestParameters.oid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Subscription
         * @param {SourceApiRemoveSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSubscription(requestParameters: SourceApiRemoveSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSubscription(requestParameters.oid, requestParameters.sourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update the basic information stored on a Customer, such as first name, last name and notes
         * @summary Update Customer
         * @param {SourceApiUpdateCustomerInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomerInformation(requestParameters: SourceApiUpdateCustomerInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceUpdateCustomerInformationResponse>> {
            const sourceUpdateCustomerInformationRequest: SourceUpdateCustomerInformationRequest = {
                name: requestParameters.name,
                notes: requestParameters.notes,
                created: requestParameters.created,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomerInformation(requestParameters.customerOid, requestParameters.sourceId, sourceUpdateCustomerInformationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Plan
         * @param {SourceApiUpdatePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlan(requestParameters: SourceApiUpdatePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceUpdatePlanResponse>> {
            const sourceUpdatePlanRequest: SourceUpdatePlanRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlan(requestParameters.planOid, requestParameters.sourceId, sourceUpdatePlanRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This allows you to update a Subscription, such as changing plans and addons.
         * @summary Update Subscription
         * @param {SourceApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscription(requestParameters: SourceApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceUpdateSubscriptionResponse>> {
            const sourceUpdateSubscriptionRequest: SourceUpdateSubscriptionRequest = {
                plan_oid: requestParameters.plan_oid,
                occurred_at: requestParameters.occurred_at,
                addons: requestParameters.addons,
                quantity: requestParameters.quantity,
                discount: requestParameters.discount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscription(requestParameters.subscriptionOid, requestParameters.sourceId, sourceUpdateSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SourceApi - factory interface
 * @export
 */
export const SourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourceApiFp(configuration)
    return {
        /**
         * This endpoint allows you to cancel a subscription.
         * @summary Cancel Subscription
         * @param {SourceApiCancelSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription(requestParameters: SourceApiCancelSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<SourceCancelSubscriptionResponse> {
            return localVarFp.cancelSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create \"One-Off\" charges that are not linked to a subscription.
         * @summary Create Charge
         * @param {SourceApiCreateChargeOneOffRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChargeOneOff(requestParameters: SourceApiCreateChargeOneOffRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createChargeOneOff(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a customer record. After you create the record, you will be able to create a [Subscription](https://developers.baremetrics.com/reference/introduction)
         * @summary Create Customer
         * @param {SourceApiCreateCustomerRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerRecord(requestParameters: SourceApiCreateCustomerRecordRequest, options?: AxiosRequestConfig): AxiosPromise<SourceCreateCustomerRecordResponse> {
            return localVarFp.createCustomerRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create \"One-Off\" refunds that are not linked to a subscription.
         * @summary Create Refund
         * @param {SourceApiCreateOneOffRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneOffRefund(requestParameters: SourceApiCreateOneOffRefundRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createOneOffRefund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a plan for use when [creating](https://developers.baremetrics.com/reference/introduction) or [updating](https://developers.baremetrics.com/reference/introduction) subscriptions.
         * @summary Create Plan
         * @param {SourceApiCreatePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlan(requestParameters: SourceApiCreatePlanRequest, options?: AxiosRequestConfig): AxiosPromise<SourceCreatePlanResponse> {
            return localVarFp.createPlan(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create a Subscription.
         * @summary Create Subscription
         * @param {SourceApiCreateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(requestParameters: SourceApiCreateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<SourceCreateSubscriptionResponse> {
            return localVarFp.createSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Customer
         * @param {SourceApiDeleteCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(requestParameters: SourceApiDeleteCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Plan
         * @param {SourceApiDeletePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlan(requestParameters: SourceApiDeletePlanRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deletePlan(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Charge
         * @param {SourceApiGetChargeDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeDetails(requestParameters: SourceApiGetChargeDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getChargeDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Charges
         * @param {SourceApiGetChargeListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargeList(requestParameters: SourceApiGetChargeListRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getChargeList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Customer
         * @param {SourceApiGetCustomerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerDetails(requestParameters: SourceApiGetCustomerDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<SourceGetCustomerDetailsResponse> {
            return localVarFp.getCustomerDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of all customers on your account
         * @summary List Customers
         * @param {SourceApiGetCustomerListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerList(requestParameters: SourceApiGetCustomerListRequest, options?: AxiosRequestConfig): AxiosPromise<SourceGetCustomerListResponse> {
            return localVarFp.getCustomerList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Event
         * @param {SourceApiGetEventByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById(requestParameters: SourceApiGetEventByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getEventById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Events
         * @param {SourceApiGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(requestParameters: SourceApiGetEventsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Plan
         * @param {SourceApiGetPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlan(requestParameters: SourceApiGetPlanRequest, options?: AxiosRequestConfig): AxiosPromise<SourceGetPlanResponse> {
            return localVarFp.getPlan(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Plans
         * @param {SourceApiGetPlansListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlansList(requestParameters: SourceApiGetPlansListRequest, options?: AxiosRequestConfig): AxiosPromise<SourceGetPlansListResponse> {
            return localVarFp.getPlansList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Refund
         * @param {SourceApiGetRefundDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundDetails(requestParameters: SourceApiGetRefundDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<SourceGetRefundDetailsResponse> {
            return localVarFp.getRefundDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Refunds
         * @param {SourceApiGetRefundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefunds(requestParameters: SourceApiGetRefundsRequest, options?: AxiosRequestConfig): AxiosPromise<SourceGetRefundsResponse> {
            return localVarFp.getRefunds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Subscription
         * @param {SourceApiGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(requestParameters: SourceApiGetSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all subscriptions linked to this API Key.
         * @summary List Subscriptions
         * @param {SourceApiGetSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptions(requestParameters: SourceApiGetSubscriptionsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getSubscriptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Customer Events
         * @param {SourceApiListCustomerEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerEvents(requestParameters: SourceApiListCustomerEventsRequest, options?: AxiosRequestConfig): AxiosPromise<SourceListCustomerEventsResponse> {
            return localVarFp.listCustomerEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(options?: AxiosRequestConfig): AxiosPromise<SourceListSourcesResponse> {
            return localVarFp.listSources(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete \"One-Off\" charges that are not linked to a subscription.
         * @summary Delete Charge
         * @param {SourceApiRemoveOneOffChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOneOffCharge(requestParameters: SourceApiRemoveOneOffChargeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeOneOffCharge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete \"One-Off\" refunds that are not linked to a subscription.
         * @summary Delete Refund
         * @param {SourceApiRemoveOneOffRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOneOffRefund(requestParameters: SourceApiRemoveOneOffRefundRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeOneOffRefund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Subscription
         * @param {SourceApiRemoveSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscription(requestParameters: SourceApiRemoveSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update the basic information stored on a Customer, such as first name, last name and notes
         * @summary Update Customer
         * @param {SourceApiUpdateCustomerInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerInformation(requestParameters: SourceApiUpdateCustomerInformationRequest, options?: AxiosRequestConfig): AxiosPromise<SourceUpdateCustomerInformationResponse> {
            return localVarFp.updateCustomerInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Plan
         * @param {SourceApiUpdatePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlan(requestParameters: SourceApiUpdatePlanRequest, options?: AxiosRequestConfig): AxiosPromise<SourceUpdatePlanResponse> {
            return localVarFp.updatePlan(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This allows you to update a Subscription, such as changing plans and addons.
         * @summary Update Subscription
         * @param {SourceApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(requestParameters: SourceApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<SourceUpdateSubscriptionResponse> {
            return localVarFp.updateSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelSubscription operation in SourceApi.
 * @export
 * @interface SourceApiCancelSubscriptionRequest
 */
export type SourceApiCancelSubscriptionRequest = {
    
    /**
    * Your unique ID for the subscription
    * @type {string}
    * @memberof SourceApiCancelSubscription
    */
    readonly subscriptionOid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiCancelSubscription
    */
    readonly sourceId: string
    
} & SourceCancelSubscriptionRequest

/**
 * Request parameters for createChargeOneOff operation in SourceApi.
 * @export
 * @interface SourceApiCreateChargeOneOffRequest
 */
export type SourceApiCreateChargeOneOffRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiCreateChargeOneOff
    */
    readonly sourceId: string
    
} & SourceCreateChargeOneOffRequest

/**
 * Request parameters for createCustomerRecord operation in SourceApi.
 * @export
 * @interface SourceApiCreateCustomerRecordRequest
 */
export type SourceApiCreateCustomerRecordRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiCreateCustomerRecord
    */
    readonly sourceId: string
    
} & SourceCreateCustomerRecordRequest

/**
 * Request parameters for createOneOffRefund operation in SourceApi.
 * @export
 * @interface SourceApiCreateOneOffRefundRequest
 */
export type SourceApiCreateOneOffRefundRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiCreateOneOffRefund
    */
    readonly sourceId: string
    
} & SourceCreateOneOffRefundRequest

/**
 * Request parameters for createPlan operation in SourceApi.
 * @export
 * @interface SourceApiCreatePlanRequest
 */
export type SourceApiCreatePlanRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiCreatePlan
    */
    readonly sourceId: string
    
} & SourceCreatePlanRequest

/**
 * Request parameters for createSubscription operation in SourceApi.
 * @export
 * @interface SourceApiCreateSubscriptionRequest
 */
export type SourceApiCreateSubscriptionRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiCreateSubscription
    */
    readonly sourceId: string
    
} & SourceCreateSubscriptionRequest

/**
 * Request parameters for deleteCustomer operation in SourceApi.
 * @export
 * @interface SourceApiDeleteCustomerRequest
 */
export type SourceApiDeleteCustomerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiDeleteCustomer
    */
    readonly oid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiDeleteCustomer
    */
    readonly sourceId: string
    
}

/**
 * Request parameters for deletePlan operation in SourceApi.
 * @export
 * @interface SourceApiDeletePlanRequest
 */
export type SourceApiDeletePlanRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiDeletePlan
    */
    readonly oid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiDeletePlan
    */
    readonly sourceId: string
    
}

/**
 * Request parameters for getChargeDetails operation in SourceApi.
 * @export
 * @interface SourceApiGetChargeDetailsRequest
 */
export type SourceApiGetChargeDetailsRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetChargeDetails
    */
    readonly sourceId: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetChargeDetails
    */
    readonly oid: string
    
}

/**
 * Request parameters for getChargeList operation in SourceApi.
 * @export
 * @interface SourceApiGetChargeListRequest
 */
export type SourceApiGetChargeListRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetChargeList
    */
    readonly sourceId: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetChargeList
    */
    readonly start?: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetChargeList
    */
    readonly end?: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetChargeList
    */
    readonly subscriptionOid?: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetChargeList
    */
    readonly customerOid?: string
    
}

/**
 * Request parameters for getCustomerDetails operation in SourceApi.
 * @export
 * @interface SourceApiGetCustomerDetailsRequest
 */
export type SourceApiGetCustomerDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetCustomerDetails
    */
    readonly oid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetCustomerDetails
    */
    readonly sourceId: string
    
}

/**
 * Request parameters for getCustomerList operation in SourceApi.
 * @export
 * @interface SourceApiGetCustomerListRequest
 */
export type SourceApiGetCustomerListRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetCustomerList
    */
    readonly sourceId: string
    
    /**
    * Allows you to search for a customer based on: oid, email, notes and name
    * @type {string}
    * @memberof SourceApiGetCustomerList
    */
    readonly search?: string
    
    /**
    * Allows you to sort the results. You can use ltv or created
    * @type {string}
    * @memberof SourceApiGetCustomerList
    */
    readonly sort?: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetCustomerList
    */
    readonly order?: string
    
}

/**
 * Request parameters for getEventById operation in SourceApi.
 * @export
 * @interface SourceApiGetEventByIdRequest
 */
export type SourceApiGetEventByIdRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetEventById
    */
    readonly sourceId: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetEventById
    */
    readonly id: string
    
}

/**
 * Request parameters for getEvents operation in SourceApi.
 * @export
 * @interface SourceApiGetEventsRequest
 */
export type SourceApiGetEventsRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetEvents
    */
    readonly sourceId: string
    
    /**
    * Set this to true to only return events that show up in the live stream
    * @type {string}
    * @memberof SourceApiGetEvents
    */
    readonly liveStream?: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetEvents
    */
    readonly start?: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetEvents
    */
    readonly end?: string
    
}

/**
 * Request parameters for getPlan operation in SourceApi.
 * @export
 * @interface SourceApiGetPlanRequest
 */
export type SourceApiGetPlanRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetPlan
    */
    readonly oid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetPlan
    */
    readonly sourceId: string
    
}

/**
 * Request parameters for getPlansList operation in SourceApi.
 * @export
 * @interface SourceApiGetPlansListRequest
 */
export type SourceApiGetPlansListRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetPlansList
    */
    readonly sourceId: string
    
    /**
    * Allows you to search based on the name or oid fields
    * @type {string}
    * @memberof SourceApiGetPlansList
    */
    readonly search?: string
    
}

/**
 * Request parameters for getRefundDetails operation in SourceApi.
 * @export
 * @interface SourceApiGetRefundDetailsRequest
 */
export type SourceApiGetRefundDetailsRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetRefundDetails
    */
    readonly sourceId: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetRefundDetails
    */
    readonly oid: string
    
}

/**
 * Request parameters for getRefunds operation in SourceApi.
 * @export
 * @interface SourceApiGetRefundsRequest
 */
export type SourceApiGetRefundsRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetRefunds
    */
    readonly sourceId: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetRefunds
    */
    readonly start?: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetRefunds
    */
    readonly end?: string
    
}

/**
 * Request parameters for getSubscription operation in SourceApi.
 * @export
 * @interface SourceApiGetSubscriptionRequest
 */
export type SourceApiGetSubscriptionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiGetSubscription
    */
    readonly oid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetSubscription
    */
    readonly sourceId: string
    
}

/**
 * Request parameters for getSubscriptions operation in SourceApi.
 * @export
 * @interface SourceApiGetSubscriptionsRequest
 */
export type SourceApiGetSubscriptionsRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiGetSubscriptions
    */
    readonly sourceId: string
    
    /**
    * This allows you to return subscriptions for a given customer
    * @type {string}
    * @memberof SourceApiGetSubscriptions
    */
    readonly customerOid?: string
    
    /**
    * Allows you to order subscriptions from newest to oldest `desc` or oldest to newest `asc`
    * @type {string}
    * @memberof SourceApiGetSubscriptions
    */
    readonly order?: string
    
}

/**
 * Request parameters for listCustomerEvents operation in SourceApi.
 * @export
 * @interface SourceApiListCustomerEventsRequest
 */
export type SourceApiListCustomerEventsRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiListCustomerEvents
    */
    readonly sourceId: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiListCustomerEvents
    */
    readonly oid: string
    
}

/**
 * Request parameters for removeOneOffCharge operation in SourceApi.
 * @export
 * @interface SourceApiRemoveOneOffChargeRequest
 */
export type SourceApiRemoveOneOffChargeRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiRemoveOneOffCharge
    */
    readonly sourceId: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiRemoveOneOffCharge
    */
    readonly oid: string
    
}

/**
 * Request parameters for removeOneOffRefund operation in SourceApi.
 * @export
 * @interface SourceApiRemoveOneOffRefundRequest
 */
export type SourceApiRemoveOneOffRefundRequest = {
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiRemoveOneOffRefund
    */
    readonly sourceId: string
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiRemoveOneOffRefund
    */
    readonly oid: string
    
}

/**
 * Request parameters for removeSubscription operation in SourceApi.
 * @export
 * @interface SourceApiRemoveSubscriptionRequest
 */
export type SourceApiRemoveSubscriptionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SourceApiRemoveSubscription
    */
    readonly oid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiRemoveSubscription
    */
    readonly sourceId: string
    
}

/**
 * Request parameters for updateCustomerInformation operation in SourceApi.
 * @export
 * @interface SourceApiUpdateCustomerInformationRequest
 */
export type SourceApiUpdateCustomerInformationRequest = {
    
    /**
    * Your unique ID for the customer
    * @type {string}
    * @memberof SourceApiUpdateCustomerInformation
    */
    readonly customerOid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiUpdateCustomerInformation
    */
    readonly sourceId: string
    
} & SourceUpdateCustomerInformationRequest

/**
 * Request parameters for updatePlan operation in SourceApi.
 * @export
 * @interface SourceApiUpdatePlanRequest
 */
export type SourceApiUpdatePlanRequest = {
    
    /**
    * Your interval plan id
    * @type {string}
    * @memberof SourceApiUpdatePlan
    */
    readonly planOid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiUpdatePlan
    */
    readonly sourceId: string
    
} & SourceUpdatePlanRequest

/**
 * Request parameters for updateSubscription operation in SourceApi.
 * @export
 * @interface SourceApiUpdateSubscriptionRequest
 */
export type SourceApiUpdateSubscriptionRequest = {
    
    /**
    * Your unique ID for the subscription
    * @type {string}
    * @memberof SourceApiUpdateSubscription
    */
    readonly subscriptionOid: string
    
    /**
    * Please see [Sources](ref:sources)
    * @type {string}
    * @memberof SourceApiUpdateSubscription
    */
    readonly sourceId: string
    
} & SourceUpdateSubscriptionRequest

/**
 * SourceApiGenerated - object-oriented interface
 * @export
 * @class SourceApiGenerated
 * @extends {BaseAPI}
 */
export class SourceApiGenerated extends BaseAPI {
    /**
     * This endpoint allows you to cancel a subscription.
     * @summary Cancel Subscription
     * @param {SourceApiCancelSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public cancelSubscription(requestParameters: SourceApiCancelSubscriptionRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).cancelSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create \"One-Off\" charges that are not linked to a subscription.
     * @summary Create Charge
     * @param {SourceApiCreateChargeOneOffRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public createChargeOneOff(requestParameters: SourceApiCreateChargeOneOffRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).createChargeOneOff(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a customer record. After you create the record, you will be able to create a [Subscription](https://developers.baremetrics.com/reference/introduction)
     * @summary Create Customer
     * @param {SourceApiCreateCustomerRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public createCustomerRecord(requestParameters: SourceApiCreateCustomerRecordRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).createCustomerRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create \"One-Off\" refunds that are not linked to a subscription.
     * @summary Create Refund
     * @param {SourceApiCreateOneOffRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public createOneOffRefund(requestParameters: SourceApiCreateOneOffRefundRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).createOneOffRefund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a plan for use when [creating](https://developers.baremetrics.com/reference/introduction) or [updating](https://developers.baremetrics.com/reference/introduction) subscriptions.
     * @summary Create Plan
     * @param {SourceApiCreatePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public createPlan(requestParameters: SourceApiCreatePlanRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).createPlan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create a Subscription.
     * @summary Create Subscription
     * @param {SourceApiCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public createSubscription(requestParameters: SourceApiCreateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).createSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Customer
     * @param {SourceApiDeleteCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public deleteCustomer(requestParameters: SourceApiDeleteCustomerRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).deleteCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Plan
     * @param {SourceApiDeletePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public deletePlan(requestParameters: SourceApiDeletePlanRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).deletePlan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Charge
     * @param {SourceApiGetChargeDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getChargeDetails(requestParameters: SourceApiGetChargeDetailsRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getChargeDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Charges
     * @param {SourceApiGetChargeListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getChargeList(requestParameters: SourceApiGetChargeListRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getChargeList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Customer
     * @param {SourceApiGetCustomerDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getCustomerDetails(requestParameters: SourceApiGetCustomerDetailsRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getCustomerDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a list of all customers on your account
     * @summary List Customers
     * @param {SourceApiGetCustomerListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getCustomerList(requestParameters: SourceApiGetCustomerListRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getCustomerList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Event
     * @param {SourceApiGetEventByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getEventById(requestParameters: SourceApiGetEventByIdRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getEventById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Events
     * @param {SourceApiGetEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getEvents(requestParameters: SourceApiGetEventsRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Plan
     * @param {SourceApiGetPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getPlan(requestParameters: SourceApiGetPlanRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getPlan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Plans
     * @param {SourceApiGetPlansListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getPlansList(requestParameters: SourceApiGetPlansListRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getPlansList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Refund
     * @param {SourceApiGetRefundDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getRefundDetails(requestParameters: SourceApiGetRefundDetailsRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getRefundDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Refunds
     * @param {SourceApiGetRefundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getRefunds(requestParameters: SourceApiGetRefundsRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getRefunds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Subscription
     * @param {SourceApiGetSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getSubscription(requestParameters: SourceApiGetSubscriptionRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all subscriptions linked to this API Key.
     * @summary List Subscriptions
     * @param {SourceApiGetSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public getSubscriptions(requestParameters: SourceApiGetSubscriptionsRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).getSubscriptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Customer Events
     * @param {SourceApiListCustomerEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public listCustomerEvents(requestParameters: SourceApiListCustomerEventsRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).listCustomerEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public listSources(options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).listSources(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete \"One-Off\" charges that are not linked to a subscription.
     * @summary Delete Charge
     * @param {SourceApiRemoveOneOffChargeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public removeOneOffCharge(requestParameters: SourceApiRemoveOneOffChargeRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).removeOneOffCharge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete \"One-Off\" refunds that are not linked to a subscription.
     * @summary Delete Refund
     * @param {SourceApiRemoveOneOffRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public removeOneOffRefund(requestParameters: SourceApiRemoveOneOffRefundRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).removeOneOffRefund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Subscription
     * @param {SourceApiRemoveSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public removeSubscription(requestParameters: SourceApiRemoveSubscriptionRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).removeSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update the basic information stored on a Customer, such as first name, last name and notes
     * @summary Update Customer
     * @param {SourceApiUpdateCustomerInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public updateCustomerInformation(requestParameters: SourceApiUpdateCustomerInformationRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).updateCustomerInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Plan
     * @param {SourceApiUpdatePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public updatePlan(requestParameters: SourceApiUpdatePlanRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).updatePlan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This allows you to update a Subscription, such as changing plans and addons.
     * @summary Update Subscription
     * @param {SourceApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApiGenerated
     */
    public updateSubscription(requestParameters: SourceApiUpdateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SourceApiFp(this.configuration).updateSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
