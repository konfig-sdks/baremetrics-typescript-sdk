/* tslint:disable */
/* eslint-disable */
/*
Production

Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect. 

In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster: 

Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit. 

Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.

Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReasonShowDetailsResponse } from '../models';
// @ts-ignore
import { ReasonUpdateReasonByIdRequest } from '../models';
// @ts-ignore
import { ReasonUpdateReasonByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReasonApi - axios parameter creator
 * @export
 */
export const ReasonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Reason
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteById', 'id', id)
            const localVarPath = `/v1/cancellation_insights/reasons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/cancellation_insights/reasons/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Reason
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showDetails', 'id', id)
            const localVarPath = `/v1/cancellation_insights/reasons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/cancellation_insights/reasons/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Reason
         * @param {string} id 
         * @param {ReasonUpdateReasonByIdRequest} [reasonUpdateReasonByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReasonById: async (id: string, reasonUpdateReasonByIdRequest?: ReasonUpdateReasonByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateReasonById', 'id', id)
            const localVarPath = `/v1/cancellation_insights/reasons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: reasonUpdateReasonByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/cancellation_insights/reasons/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(reasonUpdateReasonByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReasonApi - functional programming interface
 * @export
 */
export const ReasonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReasonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Reason
         * @param {ReasonApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: ReasonApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Reason
         * @param {ReasonApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDetails(requestParameters: ReasonApiShowDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReasonShowDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Reason
         * @param {ReasonApiUpdateReasonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReasonById(requestParameters: ReasonApiUpdateReasonByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReasonUpdateReasonByIdResponse>> {
            const reasonUpdateReasonByIdRequest: ReasonUpdateReasonByIdRequest = {
                text: requestParameters.text,
                sort_key: requestParameters.sort_key
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReasonById(requestParameters.id, reasonUpdateReasonByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReasonApi - factory interface
 * @export
 */
export const ReasonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReasonApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Reason
         * @param {ReasonApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: ReasonApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Reason
         * @param {ReasonApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails(requestParameters: ReasonApiShowDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ReasonShowDetailsResponse> {
            return localVarFp.showDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Reason
         * @param {ReasonApiUpdateReasonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReasonById(requestParameters: ReasonApiUpdateReasonByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ReasonUpdateReasonByIdResponse> {
            return localVarFp.updateReasonById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteById operation in ReasonApi.
 * @export
 * @interface ReasonApiDeleteByIdRequest
 */
export type ReasonApiDeleteByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReasonApiDeleteById
    */
    readonly id: string
    
}

/**
 * Request parameters for showDetails operation in ReasonApi.
 * @export
 * @interface ReasonApiShowDetailsRequest
 */
export type ReasonApiShowDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReasonApiShowDetails
    */
    readonly id: string
    
}

/**
 * Request parameters for updateReasonById operation in ReasonApi.
 * @export
 * @interface ReasonApiUpdateReasonByIdRequest
 */
export type ReasonApiUpdateReasonByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReasonApiUpdateReasonById
    */
    readonly id: string
    
} & ReasonUpdateReasonByIdRequest

/**
 * ReasonApiGenerated - object-oriented interface
 * @export
 * @class ReasonApiGenerated
 * @extends {BaseAPI}
 */
export class ReasonApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Delete Reason
     * @param {ReasonApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReasonApiGenerated
     */
    public deleteById(requestParameters: ReasonApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return ReasonApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Reason
     * @param {ReasonApiShowDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReasonApiGenerated
     */
    public showDetails(requestParameters: ReasonApiShowDetailsRequest, options?: AxiosRequestConfig) {
        return ReasonApiFp(this.configuration).showDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Reason
     * @param {ReasonApiUpdateReasonByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReasonApiGenerated
     */
    public updateReasonById(requestParameters: ReasonApiUpdateReasonByIdRequest, options?: AxiosRequestConfig) {
        return ReasonApiFp(this.configuration).updateReasonById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
