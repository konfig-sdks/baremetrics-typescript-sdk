/* tslint:disable */
/* eslint-disable */
/*
Production

Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect. 

In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster: 

Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit. 

Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.

Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GoalCreateNewGoalRequest } from '../models';
// @ts-ignore
import { GoalCreateNewGoalResponse } from '../models';
// @ts-ignore
import { GoalGetByIdResponse } from '../models';
// @ts-ignore
import { GoalGetListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GoalApi - axios parameter creator
 * @export
 */
export const GoalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Goal
         * @param {GoalCreateNewGoalRequest} [goalCreateNewGoalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGoal: async (goalCreateNewGoalRequest?: GoalCreateNewGoalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalCreateNewGoalRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/goals',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalCreateNewGoalRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Goal
         * @param {string} id Unique ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/v1/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/goals/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/goals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Goal
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('remove', 'id', id)
            const localVarPath = `/v1/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/goals/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalApi - functional programming interface
 * @export
 */
export const GoalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Goal
         * @param {GoalApiCreateNewGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewGoal(requestParameters: GoalApiCreateNewGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalCreateNewGoalResponse>> {
            const goalCreateNewGoalRequest: GoalCreateNewGoalRequest = {
                metric: requestParameters.metric,
                start_amount: requestParameters.start_amount,
                end_amount: requestParameters.end_amount,
                start_date: requestParameters.start_date,
                end_date: requestParameters.end_date,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewGoal(goalCreateNewGoalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Goal
         * @param {GoalApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: GoalApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Goal
         * @param {GoalApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(requestParameters: GoalApiRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoalApi - factory interface
 * @export
 */
export const GoalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Goal
         * @param {GoalApiCreateNewGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGoal(requestParameters: GoalApiCreateNewGoalRequest, options?: AxiosRequestConfig): AxiosPromise<GoalCreateNewGoalResponse> {
            return localVarFp.createNewGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Goal
         * @param {GoalApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: GoalApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GoalGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Goals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<GoalGetListResponse> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Goal
         * @param {GoalApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: GoalApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.remove(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewGoal operation in GoalApi.
 * @export
 * @interface GoalApiCreateNewGoalRequest
 */
export type GoalApiCreateNewGoalRequest = {
    
} & GoalCreateNewGoalRequest

/**
 * Request parameters for getById operation in GoalApi.
 * @export
 * @interface GoalApiGetByIdRequest
 */
export type GoalApiGetByIdRequest = {
    
    /**
    * Unique ID
    * @type {string}
    * @memberof GoalApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for remove operation in GoalApi.
 * @export
 * @interface GoalApiRemoveRequest
 */
export type GoalApiRemoveRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GoalApiRemove
    */
    readonly id: string
    
}

/**
 * GoalApiGenerated - object-oriented interface
 * @export
 * @class GoalApiGenerated
 * @extends {BaseAPI}
 */
export class GoalApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Goal
     * @param {GoalApiCreateNewGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalApiGenerated
     */
    public createNewGoal(requestParameters: GoalApiCreateNewGoalRequest, options?: AxiosRequestConfig) {
        return GoalApiFp(this.configuration).createNewGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Goal
     * @param {GoalApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalApiGenerated
     */
    public getById(requestParameters: GoalApiGetByIdRequest, options?: AxiosRequestConfig) {
        return GoalApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Goals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return GoalApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Goal
     * @param {GoalApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalApiGenerated
     */
    public remove(requestParameters: GoalApiRemoveRequest, options?: AxiosRequestConfig) {
        return GoalApiFp(this.configuration).remove(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
